!function(e){if("object"==typeof exports)module.exports=e();else if("function"==typeof define&&define.amd)define(e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.Profile=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){

/*
 * Copyright 2015 IBM Corp. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var Profile;

Profile = (function () {
  function Profile(rawProfile) {
    this.rawProfile = rawProfile;
    this.mapped = this.mapProfile(rawProfile);
    this.aliases = {
      big5: "personality"
    };
  }

  Profile.prototype.toPathId = function (trait) {
    return trait.id.toLowerCase().replace(" ", "_");
  };

  Profile.prototype.getPaths = function (mapped, current) {
    var innerPaths, keys;
    mapped = mapped || this.mapped;
    keys = Object.keys(mapped).filter(function (key) {
      return key !== "self";
    });
    innerPaths = [];
    keys.forEach((function (_this) {
      return function (key) {
        return innerPaths = innerPaths.concat(_this.getPaths(mapped[key], key));
      };
    })(this));
    if (current != null) {
      innerPaths = [current].concat(innerPaths.map(function (path) {
        return current + "." + path;
      }));
    }
    return innerPaths;
  };

  Profile.prototype.mapFacets = function (trait) {
    var mapped;
    mapped = {};
    if (trait.children != null) {
      trait.children.forEach((function (_this) {
        return function (facet) {
          mapped[_this.toPathId(facet)] = _this.mapFacets(facet);
          return mapped[_this.toPathId(facet)].self = facet;
        };
      })(this));
    }
    return mapped;
  };

  Profile.prototype.mapTraits = function (category) {
    var mapped;
    mapped = {
      trait: {},
      facet: {}
    };
    category.children[0].children.forEach((function (_this) {
      return function (trait) {
        mapped.trait[_this.toPathId(trait)] = {
          self: trait
        };
        return mapped.facet[_this.toPathId(trait)] = _this.mapFacets(trait);
      };
    })(this));
    return mapped;
  };

  Profile.prototype.mapProfile = function (rawProfile) {
    var mapped;
    mapped = {};
    rawProfile.tree.children.forEach((function (_this) {
      return function (trait) {
        return mapped[_this.toPathId(trait)] = _this.mapTraits(trait);
      };
    })(this));
    return mapped;
  };

  Profile.prototype.processAliases = function (path) {
    Object.keys(this.aliases).forEach((function (_this) {
      return function (alias) {
        return path = path.replace(alias, _this.aliases[alias]);
      };
    })(this));
    return path;
  };

  Profile.prototype._getTrait = function (path, mapped) {
    var parts;
    mapped = mapped || this.mapped;
    parts = path.split(".")[0] !== "" ? path.split(".") : [];
    if (parts.length > 0) {
      return this._getTrait(parts.slice(1).join("."), mapped[parts[0]]);
    } else {
      return mapped.self;
    }
  };

  Profile.prototype.getTrait = function (path) {
    return this._getTrait(this.processAliases(path));
  };

  return Profile;
})();

module.exports = Profile;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
(1)
});
